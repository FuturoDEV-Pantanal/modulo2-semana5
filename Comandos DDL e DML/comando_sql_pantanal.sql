-- Comandos gerados a partir da Modelo Entidade Relacionamento construido com a ferramenta ERD Tool do PgAdmin

-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;

CREATE TABLE IF NOT EXISTS public.departamento
(
    id serial,
    nome character varying(40) NOT NULL,
    obsercacao character varying(120),
    PRIMARY KEY (id),
    CONSTRAINT unk_nome_dpto UNIQUE (nome)
);

COMMENT ON CONSTRAINT unk_nome_dpto ON public.departamento
    IS 'Não pode existir nome duplicado do departamento';

CREATE TABLE IF NOT EXISTS public.pessoa
(
    id serial,
    nome character varying(60) NOT NULL,
    data_nascimento date,
    email character varying(120),
    telefone character varying(20),
    celular character varying(20),
    data_cadastro date DEFAULT CURRENT_DATE,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.funcionario
(
    id serial,
    id_departamento integer NOT NULL,
    id_pessoa integer NOT NULL,
    salario numeric(16, 2),
    data_contrato date,
    data_cadastro date DEFAULT CURRENT_DATE,
    estado "char",
    PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.funcionario
    ADD CONSTRAINT fk_departamento FOREIGN KEY (id_departamento)
    REFERENCES public.departamento (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.funcionario
    ADD CONSTRAINT fk_pessoa FOREIGN KEY (id_pessoa)
    REFERENCES public.pessoa (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;

INSERT INTO public.departamento(
	id, nome, observacao)
	VALUES (1, 'Recursos Humanos', 'Depto. de Recursos Humanos');
	
INSERT INTO public.departamento(
	id, nome, observacao)
	VALUES (2, 'Faturamento', 'Depto. de Faturamento');
	
INSERT INTO public.departamento(
	id, nome, observacao)
	VALUES (3, 'Contabilidade', 'Depto. de Contabilidade');	
	
INSERT INTO public.pessoa(
	id, nome, data_nascimento, email, telefone, celular, data_cadastro)
	VALUES (1, 'João da Silva', '1984-06-20', 'joaosilva@gmail.com', '51-3242-7355', '53-99977-4563', CURRENT_DATE);
	
INSERT INTO public.pessoa(
	id, nome, data_nascimento, email, telefone, celular, data_cadastro)
	VALUES (2, 'Bruno Moura', '1984-12-20', 'bruno@gmail.com', '51-3240-1471', '53-99945-3689', CURRENT_DATE);
	
INSERT INTO public.funcionario(
	id, id_departamento, salario, data_contrato, data_cadastro, estado, id_pessoa)
	VALUES (1, 1, '6850.00', '2022-02-16', '2022-06-10', 'A', 1);
	
	
UPDATE public.departamento
	SET nome='Recursos Humanos - (RH)', 
	    observacao='Departamento de Recursos Humanos'
	WHERE id = 1;	
	
UPDATE public.pessoa
	SET nome='João Vitor da Silva', 
	    data_nascimento='1986-06-12', 
		email='joaovitorsilva@gmail.com', 
		telefone='51-3240-5698', 
		celular='51-99987-3456' 
	WHERE id = 1;
	
UPDATE public.funcionario
	SET 
	salario='10900.00' 
	WHERE id = 1;
	
	
	
select 
 p.nome, p.telefone, p.celular,p.email, f.estado, f.salario 
from pessoa p
full outer join funcionario f on (p.id = f.id_pessoa)
where
f is null;


select 
 p.nome, p.telefone, p.celular,p.email, f.estado, f.salario 
from funcionario f
right outer join pessoa p on(p.id = f.id_pessoa)
where
f is null;

select 
 p.nome,
 p.email,
 p.telefone,
 p.celular,
 d.nome as departamento
from pessoa p 
full outer join funcionario f on(f.id_pessoa = p.id)
full outer join departamento d on (d.id = f.id_departamento)
where
p is null or f is null or d is null;
	
	
DELETE FROM public.departamento
	WHERE id = 1;
	
DELETE FROM public.pessoa
	WHERE id = 1;
	
DELETE FROM public.funcionario
	WHERE id = 1;	
	
select * from public.departamento;

select 
  d.id as id, 
  d.nome as descricao 
from departamento d;
  
select * from public.pessoa;

select 
  p.id as id,
  p.nome,
  p.data_nascimento as DataNascimento
from pessoa p;

select * from public.funcionario;

select 
 f.id as id,
 f.data_cadastro as DataCadastro,
 case
  when f.estado = 'A' then 'Ativo' 
  when f.estado = 'I' then 'Inativo' 
 else 'Valor não informado' 
 end as Status
from funcionario f;


select 
 p.nome,
 p.email,
 p.telefone,
 p.celular,
 d.nome as nome_departamento
from pessoa p
inner join funcionario f on(f.id_pessoa = p.id)
inner join departamento d on(d.id = f.id_departamento);


select 
 p.nome,
 p.email,
 p.telefone,
 p.celular,
 d.nome as nome_departamento
from pessoa p
left outer join funcionario f on(f.id_pessoa = p.id)
left outer join departamento d on(d.id = f.id_departamento);


select 
 p.nome,
 p.email,
 p.telefone,
 p.celular,
 d.nome as nome_departamento
from pessoa p
right outer join funcionario f on(f.id_pessoa = p.id)
right outer join departamento d on(d.id = f.id_departamento)



--

select * from departamento;

select * from pessoa;

select * from funcionario;

select
  f.id as id,
  f.data_cadastro,
 case
     when f.estado = 'A'  then 'Ativo'
	 when f.estado = 'I' then 'Inativo'
    else 'Valor não informado'	 
  end as Status
from funcionario f; 

INSERT INTO public.pessoa(
	nome, data_nascimento, email, telefone, celular, data_cadastro)
	VALUES ('Mario Rosa', '1976-03-12', 'mariorosa@gmail.com', '51-8989-1245', '51-9978-8987', CURRENT_DATE);
	
INSERT INTO public.pessoa(
	nome, data_nascimento, email, telefone, celular, data_cadastro)
	VALUES ('Maria Fonsecac', '1972-04-16', 'maria@gmail.com', '51-8989-1245', '51-9978-8987', CURRENT_DATE);

INSERT INTO public.funcionario(
	id_departamento, id_pessoa, salario, data_contrato, data_cadastro, estado)
	VALUES (3, 3, '1000.00', '2022-01-15', '2022-01-15', 'A');
	
INSERT INTO public.funcionario(
	id_departamento, id_pessoa, salario, data_contrato, data_cadastro, estado)
	VALUES (3, 3, '5000.00', '2022-04-15', '2022-01-15', 'A');
	
INSERT INTO public.departamento(
	nome, obsercacao)
	VALUES ('Tecnologia da Informação', 'Departamento de TI');	
	
update
  funcionario
 set
  id_departamento = 3
where
  id = 4;

select 
  p.id,
  p.nome,
  p.telefone,
  p.celular,
  p.email,
  f.data_contrato,
  d.id as id_departamento,
  d.nome as departamento
from pessoa p
full outer join funcionario f on f.id_pessoa = p.id
full outer join departamento d on f.id_departamento = d.id 
-- where
-- upper(p.nome) like upper('%moura%')
-- f.data_contrato between '2022-01-10' and '2023-05-03'
-- f.data_contrato >= '2022-01-10' and f.data_contrato <= '2023-05-03'

select 
  d.nome as departamento,
  count(f.id) as quantidade_funcionarios,
  sum(f.salario) as total_departamento,
  avg(f.salario) as media_departamento,
  min(f.salario) as min_salario,
  max(f.salario) as max_salario
from pessoa p
inner join funcionario f on f.id_pessoa = p.id
inner join departamento d on f.id_departamento = d.id 
group by d.nome
order by d.nome asc;


  

-- Comandos de Grant e Revoke



-- cria o banco de dados
create database db_pantanal;

-- apagar o banco de dados
drop database db_pantanal;

-- criando as roles
create role gerente;
create role atendente;
create role estagiario;

-- criando usuarios e adicionando nas roles
create role gerente_pantanal login password 'pantanal' in role gerente;
create role atendente_pantanal login password 'pantanal' in role atendente;
create role estagiario_pantanal login password 'pantanal' in role estagiario;

-- Concedendo permissão para o role gerente acessar todas as tabelas e conceder permissões para outros usuários
grant select, insert, update, delete on pessoa, departamento, funcionario to gerente with grant option;

-- Concedendo permissão para o role atendente realizar insert, select, update nas tabelas pessoa, departamento, funcionario
grant insert, select on pessoa, departamento, funcionario to atendente;


-- Concedendo permissão para role estagiario fazer select nas tabelas pessoa, departamento e funcionario
grant select on pessoa, departamento, funcionario to estagiario;


create user pantanal;

alter user pantanal with password 'pantanal';

drop user pantanal;











	
	

	
	
	
	
	