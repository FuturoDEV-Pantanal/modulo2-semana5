# Configuramos a URL de conexão com o banco de dados
spring.datasource.url=jdbc:postgresql://localhost:5432/db_pantanal_api2

# Definimos o usuário de conexão com o banco de dados
spring.datasource.username=postgres

# Definimos a senha de conexão com o banco de dados
spring.datasource.password=postgres

# create-drop = drop todas as tabelas e cria novamente na inicializa��o da aplica��o
# update = atualiza toda a estrutura das tabelas na inicializa��o da aplica��o
# none = n�o faz nenhuma altera��o da estrutura das tabelas durante a inicializa��o da aplica��o
spring.jpa.hibernate.ddl-auto=create-drop

# Esta configura��o desativa as exptions de cblob geradas pelo implementa��o do JDBC do PostgreSQL
# spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false

# Informamos o dialeto do banco que vamos utilizar na aplica��o
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL9Dialect

# Quando esta configura��o esta ativada conseguimos ver os comandos DML gerandos no console da IDE
spring.jpa.show-sql=true

# Quando ativada esta configura��o conseguimos ver os DDL gerados no console
spring.jpa.generate-ddl=true

# formata a sa�da dos comando SQL gerados no console da IDE
spring.jpa.properties.hibernate.format_sql=true

# debug=true

# Propriedade usada para definir o diret�rio onde os logs ser�o salvos
dir.logs = ./logs

# Propriedade usada para definir o n�vel de log usada no arquivo logback-spring.xml
log.level = info

# server.port= 8000

logging.loggly.token=e60de826-0268-4c27-a9f2-316bdea46426